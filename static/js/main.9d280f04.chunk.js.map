{"version":3,"sources":["ImageEditor/ImageEditor.utils.js","ImageEditor/ImageFrame/ImageFrame.jsx","ImageEditor/Panel/components/Number.jsx","App.constants.js","ImageEditor/Panel/Panel.jsx","ImageEditor/ImageEditor.jsx","App.js","reportWebVitals.js","index.js"],"names":["transform","newX","newY","centerX","centerY","sin","cos","rotatedX","rotatedY","x","Math","round","y","isRotatedPointInBounds","newHeight","newWidth","getImageCanvasAndContext","image","canvas","document","createElement","context","getContext","width","height","rotate","imageData","angle","originalImageData","radians","PI","centerHeight","trunc","centerWidth","getImageCenter","abs","calculateNewDimensions","newImageData","Uint8ClampedArray","adjustedWidth","i","transformedPosition","finalPosition","j","ImageData","from","ImageFrame","rotatedImage","finalImage","className","defaultProps","Number","setAngle","useState","sanitizedValue","setSanitizedValue","useEffect","type","pattern","placeholder","value","onInput","e","inputValue","target","validity","valid","window","Panel","setImage","imageDimensions","renderTime","rotateImage","accept","onChange","toFixed","onClick","ImageEditor","file","setFile","setRotatedImage","setImageDimensions","setRenderTime","useCallback","startTime","performance","now","rotatedImageData","putImageData","Image","src","toDataURL","alt","endTime","preventDefault","reader","FileReader","files","onloadend","result","img","onload","this","drawImage","getImageData","data","readAsDataURL","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9d280f04.chunk.js","sourcesContent":["const calculateNewDimensions = (height, width, sin, cos) => {\r\n    const newHeight  = Math.round(Math.abs(height * cos) + Math.abs(width * sin));\r\n    const newWidth  = Math.round(Math.abs(width * cos) + Math.abs(height * sin));\r\n\r\n    return {newWidth, newHeight};\r\n};\r\n\r\nconst transform = (newX, newY, centerX, centerY, sin, cos) => {\r\n    //Rotate x,y co-ordinates by provided angle on the center\r\n    const rotatedX = (newX * cos) - (newY * sin);\r\n    const rotatedY = (newX * sin) + (newY * cos);\r\n\r\n    //Add center co-ordinates to get actual x,y co-ordinates\r\n    return {x: Math.round(rotatedX + centerX), y:Â Math.round(rotatedY + centerY)};\r\n};\r\n\r\nconst getImageCenter = (height, width) => ({centerHeight: Math.trunc(height/2), centerWidth: Math.trunc(width/2)});\r\n\r\nconst isRotatedPointInBounds = (newHeight, newWidth, newX, newY) => newX >= 0 && newX < newWidth && newY >= 0 && newY < newHeight;\r\n\r\nexport const getImageCanvasAndContext = (image) => {\r\n    const canvas = document.createElement('canvas');\r\n    const context = canvas.getContext('2d');\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    return {canvas, context};\r\n};\r\n\r\nexport const rotate = (imageData, angle) => {\r\n    const {originalImageData, height, width} = imageData;\r\n    const radians = angle * (Math.PI / 180);\r\n\r\n    const sin = Math.sin(radians);\r\n    const cos = Math.cos(radians);\r\n\r\n    const {centerHeight, centerWidth} = getImageCenter(height, width);\r\n\r\n    const {newHeight, newWidth} = calculateNewDimensions(width, height, sin, cos);\r\n\r\n    const newImageData = new Uint8ClampedArray((newWidth * 4) * newHeight);\r\n\r\n    const adjustedWidth = width * 4;\r\n\r\n    let y = 0;\r\n\r\n    for (let i = 0; i < adjustedWidth * height; i = i + 4) {\r\n        const x = Math.round((i % adjustedWidth) / 4);\r\n\r\n        //Get x, y co-ordinates with respect to original image center\r\n        let adjustedX = x - centerWidth;\r\n        let adjustedY = y - centerHeight;\r\n\r\n        //Apply transformations to the co-ordinates to rotate them by given angle\r\n        const transformedPosition = transform(adjustedX, adjustedY, centerWidth, centerHeight, sin, cos);\r\n\r\n        //Adjust co-ordinates according to new width, height (new center)\r\n        transformedPosition.x += Math.round((newWidth - width) / 2.0);\r\n        transformedPosition.y += Math.round((newHeight - height) / 2.0);\r\n\r\n        //If the rotated co-ordinates lie within new image dimensions store them in new image data\r\n        if (isRotatedPointInBounds(newHeight, newWidth, transformedPosition.x, transformedPosition.y)) {\r\n            const finalPosition = (transformedPosition.x * 4) + (transformedPosition.y * (newWidth * 4));\r\n            for(let j = 0; j < 4; j++) {\r\n                newImageData[finalPosition + j] = originalImageData[i + j];\r\n            }\r\n        }\r\n\r\n        if (i % adjustedWidth === 0) {\r\n            y++;\r\n        }\r\n    }\r\n    return new ImageData(Uint8ClampedArray.from(newImageData), newWidth, newHeight);\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ImageFrame.css';\r\n\r\nconst ImageFrame = ({image, rotatedImage}) => {\r\n    const finalImage = rotatedImage ? rotatedImage : image;\r\n    return (\r\n        <div className='image-frame'>\r\n            {finalImage ? finalImage : <div className='placeholder-text'>Please select an image</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nImageFrame.propTypes = {\r\n    image: PropTypes.any,\r\n    rotatedImage: PropTypes.any\r\n};\r\n\r\nImageFrame.defaultProps = {\r\n    image: null,\r\n    rotatedImage: null\r\n};\r\n\r\nexport default ImageFrame;","import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {DEGREE_PATTERN} from '../../../App.constants';\r\n\r\nconst Number = ({setAngle}) => {\r\n    const [sanitizedValue, setSanitizedValue] = useState(0);\r\n\r\n    const onInputChange = (e) => {\r\n        const inputValue = (e.target.validity.valid) ? window.Number(e.target.value) : sanitizedValue;\r\n        setSanitizedValue(inputValue);\r\n    };\r\n\r\n    useEffect(() => setAngle(sanitizedValue), [setAngle, sanitizedValue]);\r\n\r\n    return (\r\n        <input type='text' pattern={DEGREE_PATTERN}\r\n              placeholder='Degrees' value={sanitizedValue}\r\n              onInput={onInputChange}/>\r\n    );\r\n};\r\n\r\nNumber.propTypes = {\r\n    setAngle: PropTypes.func\r\n};\r\n\r\nNumber.defaultProps = {\r\n    setAngle: () => {}\r\n};\r\n\r\nexport default Number;","export const DEGREE_PATTERN = '([0-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-5][0-9]|360)';","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Number from './components/Number';\r\nimport './Panel.css';\r\n\r\nconst Panel = ({setImage, image, rotatedImage, imageDimensions, renderTime, rotateImage}) => {\r\n    const [angle, setAngle] = useState(0);\r\n\r\n    return (\r\n        <div className='action-panel'>\r\n            <div className='panel-header'>Editor Panel</div>\r\n            <input className='file-input' type='file'\r\n                   accept='image/*' onChange={setImage}/>\r\n            {image && <div className='rotate-panel'>\r\n                <div className='info'>\r\n                    {`Original Image Dimensions: ${imageDimensions.width}px width x ${imageDimensions.height}px height`}\r\n                </div>\r\n                {rotatedImage && <div className='info'>\r\n                    {`Render Time: ${renderTime?.toFixed(2)}ms`}\r\n                </div>}\r\n                <p>\r\n                    <Number setAngle={setAngle}/>\r\n                    <button onClick={() => rotateImage(angle)}>Apply</button>\r\n                </p>\r\n            </div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nPanel.propTypes = {\r\n    setImage: PropTypes.func,\r\n    image: PropTypes.any,\r\n    imageDimensions: PropTypes.shape({}),\r\n    rotatedImage: PropTypes.any,\r\n    renderTime: PropTypes.number,\r\n    onChange1: PropTypes.func,\r\n};\r\n\r\nPanel.defaultProps = {\r\n    setImage: () => {},\r\n    image: null,\r\n    rotatedImage: null,\r\n    imageDimensions: {width: 0, height: 0},\r\n    renderTime: 0,\r\n    rotateImage: null\r\n};\r\n\r\nexport default Panel;","import React, {useState, useCallback} from 'react';\r\nimport {getImageCanvasAndContext, rotate} from './ImageEditor.utils';\r\nimport ImageFrame from './ImageFrame/ImageFrame';\r\nimport Panel from './Panel/Panel';\r\nimport './ImageEditor.css';\r\n\r\nconst ImageEditor = () => {\r\n    const [file, setFile] = useState(null);\r\n    const [image, setImage] = useState(null);\r\n    const [rotatedImage, setRotatedImage] = useState(null);\r\n    const [imageDimensions, setImageDimensions] = useState({width: 0, height: 0});\r\n    const [renderTime, setRenderTime] = useState(0);\r\n\r\n    const changeImage = e => {\r\n        e.preventDefault();\r\n\r\n        let reader = new FileReader();\r\n        let file = e.target.files[0];\r\n\r\n        //Clear out the rotate image each time a new image is set\r\n        setRotatedImage(null);\r\n\r\n        reader.onloadend = () => {\r\n            if (reader.result) {\r\n                setImage(<img src={reader.result} alt='Original Document'/>);\r\n            }\r\n\r\n            let img = new Image();\r\n            img.onload = function() {\r\n                setImageDimensions({width: this.width, height: this.height});\r\n\r\n                const {context} = getImageCanvasAndContext(img);\r\n                context.drawImage(img, 0, 0 );\r\n                const imageData = context.getImageData(0, 0, img.width, img.height);\r\n\r\n                setFile(imageData.data);\r\n            };\r\n            img.src = reader.result;\r\n        };\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const rotateImage = useCallback((angle) => {\r\n        const startTime = performance.now();\r\n\r\n        const rotatedImageData = rotate({originalImageData: file, height: imageDimensions.height, width: imageDimensions.width}, angle);\r\n\r\n        const {canvas, context} = getImageCanvasAndContext(rotatedImageData);\r\n        context.putImageData(rotatedImageData, 0, 0);\r\n\r\n        let rotatedImage = new Image();\r\n        rotatedImage.src = canvas.toDataURL();\r\n\r\n        setRotatedImage(<img src={canvas.toDataURL()} alt='Rotated Document'/>);\r\n\r\n        const endTime = performance.now();\r\n        setRenderTime(endTime - startTime);\r\n    }, [file, imageDimensions]);\r\n\r\n    return (\r\n        <div className='main-container'>\r\n            <header className='page-header'>\r\n                Image Rotator Application\r\n            </header>\r\n            <div className='page-content'>\r\n                <div className='sidebar-left'>\r\n                    <Panel setImage={changeImage} image={image}\r\n                           imageDimensions={imageDimensions} rotatedImage={rotatedImage}\r\n                           renderTime={renderTime} rotateImage={rotateImage}/>\r\n                </div>\r\n                <div className='content-container'>\r\n                    <ImageFrame image={image} rotatedImage={rotatedImage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageEditor;","import React from 'react';\nimport ImageEditor from './ImageEditor/ImageEditor'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='app'>\n        <ImageEditor/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}